#!/usr/bin/env node

'use strict';

var Insteon = require('../').Insteon;
var util = require('util');
var program = require('commander');
var pkg = require('../package.json');
var version = pkg.version;

program
  .version(version)
  .usage('[options] <host:port> <device ...>')
  .option('-c, --controller', 'devices are the controller')
  .option('-l, --link', 'link devices')
  .option('-u, --unlink', 'unlink devices')
  .option('--remove [<device>,]<link>', 'remove link from device', list)
  .option('--cancel', 'cancel linking')
  .option('-g, --group <type>', 'group number to use for links', parseInt)
  .option('-v, --verbose', 'more output')
  .parse(process.argv);

function list(val) {
  if(val.indexOf(';') > -1)
  {
    return [val.substr(0, val.indexOf(';')), JSON.parse(val.substr(val.indexOf(';')+1))];
  }
  return [JSON.parse(val)];
}

if(program.args.length < 1) {
  return program.help();
}

var host, port;

var devices = [];
var idRegex = /^[0-9a-f]{2}\.?[0-9a-f]{2}\.?[0-9a-f]{2}$/i;

program.args.forEach(function(arg) {
  if(idRegex.test(arg)){
    devices.push(arg.replace(/\./g, ''));
  } else {
    var uriParts = arg.split(':');

    host = uriParts[0];
    if(uriParts.length > 1) {
      port = parseInt(uriParts[1]);
    }
  }
});



console.log('Connecting to ' + host);
var gw = new Insteon();

gw.on('connect', function () {
  if(program.remove) {
    if(program.remove.length === 2) {
      console.log('Remove link from '+program.remove[0]);
      gw.removeLink(program.remove[0], program.remove[1], function() {
        return gw.close();
      });
    } else if(program.remove.length === 1) {
      console.log('Removing link from gateway');
      gw.removeLink(program.remove[0], function() {
        return gw.close();
      });
    }
  } else if(program.cancel) {
    console.log('Canceling linking mode');
    gw.cancelLinking(function() {
      gw.close();
    });
  } else if(program.unlink) {
    if(devices.length < 2) {
      console.log('Please supply two ids');
      return gw.close();
    }
    gw.unlink(devices, program, function (err, links) {
      if (err) {
        console.log('unlinking failed: ' + err);
        return gw.close();
      }
      console.log('unlinking done: \n\n' + util.inspect(links));
      return gw.close();
    });
  } else if(program.link) {
    if(devices.length === 0) {
      devices = null;
    }
    gw.link(devices, program, function (err, links) {
      if (err) {
        console.log('linking failed: ' + err);
        return gw.close();
      }
      console.log('links created: \n\n' + util.inspect(links));
      return gw.close();
    });
  } else {
    var id = !!devices[0] ? devices[0] : null;
    console.log('Polling device: '+id);
    gw.info(id, function onInfo(err, info) {
      if(err) {
        return console.log('Failed to connect to device, ' + err);
      }

      console.log('Device found: ' + info.id + ' - ' + info.deviceCategory.name);
      console.log('Getting links for device: ' + info.id);

      gw.links(id, function onLinksFound(err, links){
        if(err) {
          return console.log('Failed to find any links because of an error, ' + err);
        }

        if(links && links.length > 0) {
          console.log('Found '+links.length+' link(s): \n');
          for(var i=0;i<links.length;i++) {
            console.log(JSON.stringify(links[i]));
          }
        } else {
          console.log('No links found.');
        }
        return gw.close();
      });
    });
  }
});

gw.on('close', function() {
  console.log('Connection closed');
});

if(host.substring(0, 5) === '/dev/' || host.substring(0, 3) === 'COM') {
  gw.serial(host);
} else {
  gw.connect(host, port);
}
