#!/usr/bin/env node

'use strict';

var Insteon = require('../').Insteon;
var program = require('commander');
var pkg = require('../package.json');
var version = pkg.version;

program
  .version(version)
  .usage('[options] <host:port>')
  .option('-v, --verbose', 'more output')
  .option('-a, --all', 'include all links')
  .parse(process.argv);

if(program.args.length !== 1) {
  program.help();
}

var host, port;

var uri = program.args.shift();
var uriParts = uri.split(':');

host = uriParts[0];
if(uriParts.length > 1) {
  port = parseInt(uriParts[1]);
}

console.log('Connecting to ' + uri);
var gw = new Insteon();

var network = {};
var to_scan = [];

gw.on('connect', function () {
  console.log('Connected');

  gw.info(function onInfo(err, info) {
    if(err) {
      return console.log('Failed to connect to gateway, ' + err);
    }

    network[info.id] = info;
    console.log('Found gateway: ' + info.id + ' - ' + info.deviceCategory.name);

    console.log('Getting links for gateway ' + info.id);
    gw.links(function onLinksFound(err, links){
      if(err) {
        return console.log('Failed to find any links because of an error, ' + err);
      }

      if(links && links.length > 0){
        console.log('Found links: ' + links.length);
        network[info.id].links = links;

        for(var link in links) {
          if(!!links[link].isInUse && to_scan.indexOf(links[link].id) === -1 && network[links[link].id] === undefined) {
            to_scan.push(links[link].id);
          }
        }

        scanLinks();
      } else {
        console.log('Gateway returned no links.');
      }
    });
  });
});

gw.on('close', function() {
  console.log('Connection closed');
});

gw.on('error', function(err) {
  console.log(err.stack);
});

if(host.substring(0, 5) === '/dev/' || host.substring(0, 3) === 'COM') {
  gw.serial(host);
} else {
  gw.connect(host, port);
}

function scanLinks() {

  if(to_scan.length === 0) {
    console.log('Done');
    console.log();
    
    printNetwork();
    gw.close();
  }

  var id = to_scan.pop();

  network[id] = null;

  gw.info(id, function(err, link) {
    if(err){
      console.log('Error: ', err);
      return scanLinks();
    }

    if(!link){
      console.log('Found new link: ' + id + ' - Unresponsive!');
      return scanLinks();
    } else {
      console.log('Found new device: ' + id + ' - ' + link.deviceCategory.name);
      network[id] = link;

      gw.links(link.id, function(err, moreLinks) {
        if(err) {
          console.log('Error getting links for devcie ' + link.id + ' - skipping');
        }
        console.log('Found links: ' + moreLinks.length);
        network[link.id].links = moreLinks;

        return scanLinks();
      });
    }
  });
}

function printNetwork() {
  console.log('\n\nNetwork Map:');
  for(var id in network) {
    var controls = {};
    var type = 'Unresponsive';
    if(network[id]){
      type = network[id].deviceCategory ? network[id].deviceCategory.name : 'Unknown Type';
      for(var i = 0; i<network[id].links.length; i++){
        var link = network[id].links[i];
        if(link.controller) {
          var grp = link.group.toString();
          controls[grp] = controls[grp] || [];
          controls[grp].push(network[id].links[i].id);
        }
      }
    }
    console.log('%s - %s', id, type);
    for(var g in controls) {
      console.log('\tControl group %s: %s', g, controls[g].join());
    }
  }
  process.exit();
}